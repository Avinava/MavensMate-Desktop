{"version":3,"sources":["containers/WebView.js"],"names":["actions","WebView","props","_onIpcMessage","bind","_onNewWindow","_didStartLoading","_didStopLoading","_didFinishLoad","_loadingTimeout","console","log","element","findDOMNode","setAttribute","view","id","v","show","clearTimeout","setTimeout","dispatch","showLoading","hideLoading","evt","params","args","channel","updateView","pid","title","projectName","sldsIconClassName","sldsIconName","sldsSprite","status","e","url","indexOf","addView","window","require","shell","openExternal","_isHidden","select","state"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;IAAYA,O;;;;;;;;;;;;IAENC,O;;;AAEJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA,kHACXA,KADW;;AAEjB,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBF,IAAtB,OAAxB;AACA,UAAKG,eAAL,GAAuB,MAAKA,eAAL,CAAqBH,IAArB,OAAvB;AACA,UAAKI,cAAL,GAAsB,MAAKA,cAAL,CAAoBJ,IAApB,OAAtB;AACA,UAAKK,eAAL;AAPiB;AAQlB;;;;wCAEmB;AAClBC,cAAQC,GAAR,CAAY,sBAAZ;AACA,UAAIC,UAAU,mBAASC,WAAT,CAAqB,IAArB,CAAd;AACAD,cAAQE,YAAR,CAAqB,iBAArB,EAAwC,EAAxC;AACAF,cAAQE,YAAR,CAAqB,IAArB,EAA2B,KAAKZ,KAAL,CAAWa,IAAX,CAAgBC,EAA3C;AACD;;;yCAEoB;AACnB,UAAIJ,UAAU,mBAASC,WAAT,CAAqB,IAArB,CAAd;AACAD,cAAQE,YAAR,CAAqB,iBAArB,EAAwC,EAAxC;AACD;;;8BAESG,C,EAAG;AACX,aAAOA,EAAEC,IAAF,GAAS,EAAT,GAAc,MAArB;AACD;;;uCAEkB;AAAA;;AACjBR,cAAQC,GAAR,CAAY,uBAAZ;AACA,UAAI,KAAKT,KAAL,CAAWa,IAAX,CAAgBG,IAApB,EAA0B;AACxB,YAAI,KAAKT,eAAT,EAA0B;AAAEU,uBAAa,KAAKV,eAAlB;AAAqC;AACjE,aAAKA,eAAL,GACEW,WAAW;AAAA,iBAAM,OAAKlB,KAAL,CAAWmB,QAAX,CAAoBrB,QAAQsB,WAAR,EAApB,CAAN;AAAA,SAAX,EAA6D,IAA7D,CADF;AAED;AACF;;;sCAEiB;AAChBZ,cAAQC,GAAR,CAAY,sBAAZ;AACA,UAAI,KAAKT,KAAL,CAAWa,IAAX,CAAgBG,IAApB,EAA0B;AACxB,YAAI,KAAKT,eAAT,EAA0B;AAAEU,uBAAa,KAAKV,eAAlB;AAAqC;AACjE,aAAKP,KAAL,CAAWmB,QAAX,CAAoBrB,QAAQuB,WAAR,EAApB;AACD;AACF;;;qCAEgB;AACfb,cAAQC,GAAR,CAAY,qBAAZ;AACD;;;kCAEaa,G,EAAK;AACjB,UAAMC,SAASD,IAAIE,IAAJ,CAAS,CAAT,CAAf;AACAhB,cAAQC,GAAR,CAAY,qBAAZ,EAAmCa,GAAnC,EAAwCC,MAAxC;AACA,UAAID,IAAIG,OAAJ,KAAgB,SAApB,EAA+B;AAC7B,aAAKzB,KAAL,CAAWmB,QAAX,CAAoBrB,QAAQ4B,UAAR,CAAmB;AACrCZ,cAAI,KAAKd,KAAL,CAAWa,IAAX,CAAgBC,EADiB;AAErCa,eAAKJ,OAAOI,GAFyB;AAGrCC,iBAAOL,OAAOK,KAHuB;AAIrCC,uBAAaN,OAAOM,WAJiB;AAKrCC,6BAAmBP,OAAOO,iBALW;AAMrCC,wBAAcR,OAAOQ,YANgB;AAOrCC,sBAAYT,OAAOS;AAPkB,SAAnB,CAApB;AASD,OAVD,MAUO,IAAIV,IAAIG,OAAJ,KAAgB,mBAApB,EAAyC;AAC9C,aAAKzB,KAAL,CAAWmB,QAAX,CAAoBrB,QAAQ4B,UAAR,CAAmB;AACrCZ,cAAI,KAAKd,KAAL,CAAWa,IAAX,CAAgBC,EADiB;AAErCmB,kBAAQ;AAF6B,SAAnB,CAApB;AAID,OALM,MAKA,IAAIX,IAAIG,OAAJ,KAAgB,mBAApB,EAAyC;AAC9C,aAAKzB,KAAL,CAAWmB,QAAX,CAAoBrB,QAAQ4B,UAAR,CAAmB;AACrCZ,cAAI,KAAKd,KAAL,CAAWa,IAAX,CAAgBC,EADiB;AAErCmB,kBAAQ;AAF6B,SAAnB,CAApB;AAID;AACF;;;iCAEYC,C,EAAG;AACd1B,cAAQC,GAAR,CAAY,8BAAZ,EAA4CyB,CAA5C;AACA,UAAIA,EAAEC,GAAF,CAAMC,OAAN,CAAc,WAAd,IAA6B,CAAjC,EAAoC;AAClC,aAAKpC,KAAL,CAAWmB,QAAX,CAAoBrB,QAAQuC,OAAR,CAAgBH,EAAEC,GAAlB,CAApB;AACD,OAFD,MAEO;AACLG,eAAOC,OAAP,CAAe,UAAf,EAA2BC,KAA3B,CAAiCC,YAAjC,CAA8CP,EAAEC,GAAhD;AACD;AACF;;;6BAEQ;AACP,UAAMtB,OAAO,KAAKb,KAAL,CAAWa,IAAxB;AACA,aACE;AACE,mBAAW,KAAK6B,SAAL,CAAe7B,IAAf,CADb;AAEE,uBAAe,KAAKP,cAFtB;AAGE,yBAAiB,KAAKF,gBAHxB;AAIE,wBAAgB,KAAKC,eAJvB;AAKE,mBAAW,KAAKF,YALlB;AAME,oBAAY,KAAKF,aANnB;AAOE,yBAAiB,IAPnB;AAQE,aAAKY,KAAKC,EARZ,EAQgB,KAAKD,KAAKsB,GAR1B,GADF;AAWD;;;;;;AAGH,SAASQ,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SAAOA,KAAP;AACD;;kBAEc,yBAAQD,MAAR,EAAgB5C,OAAhB,C","file":"containers/WebView.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport ElectronWebView from 'react-electron-webview';\nimport * as actions from '../actions/actions';\n\nclass WebView extends Component {\n\n  constructor(props) {\n    super(props);\n    this._onIpcMessage = this._onIpcMessage.bind(this);\n    this._onNewWindow = this._onNewWindow.bind(this);\n    this._didStartLoading = this._didStartLoading.bind(this);\n    this._didStopLoading = this._didStopLoading.bind(this);\n    this._didFinishLoad = this._didFinishLoad.bind(this);\n    this._loadingTimeout;\n  }\n\n  componentDidMount() {\n    console.log('component mounted!!!');\n    var element = ReactDOM.findDOMNode(this);\n    element.setAttribute('nodeintegration', '');\n    element.setAttribute('id', this.props.view.id);\n  }\n\n  componentDidUpdate() {\n    var element = ReactDOM.findDOMNode(this);\n    element.setAttribute('nodeintegration', '');\n  }\n\n  _isHidden(v) {\n    return v.show ? '' : 'hide';\n  }\n\n  _didStartLoading() {\n    console.log('webview start loading');\n    if (this.props.view.show) {\n      if (this._loadingTimeout) { clearTimeout(this._loadingTimeout); }\n      this._loadingTimeout =\n        setTimeout(() => this.props.dispatch(actions.showLoading()), 1000);\n    }\n  }\n\n  _didStopLoading() {\n    console.log('webview stop loading');\n    if (this.props.view.show) {\n      if (this._loadingTimeout) { clearTimeout(this._loadingTimeout); }\n      this.props.dispatch(actions.hideLoading());\n    }\n  }\n\n  _didFinishLoad() {\n    console.log('webview finish load');\n  }\n\n  _onIpcMessage(evt) {\n    const params = evt.args[0];\n    console.log('new ipc message -->', evt, params);\n    if (evt.channel === 'on-load') {\n      this.props.dispatch(actions.updateView({\n        id: this.props.view.id,\n        pid: params.pid,\n        title: params.title,\n        projectName: params.projectName,\n        sldsIconClassName: params.sldsIconClassName,\n        sldsIconName: params.sldsIconName,\n        sldsSprite: params.sldsSprite\n      }));\n    } else if (evt.channel === 'operation:running') {\n      this.props.dispatch(actions.updateView({\n        id: this.props.view.id,\n        status: 'operation:running'\n      }));\n    } else if (evt.channel === 'operation:stopped') {\n      this.props.dispatch(actions.updateView({\n        id: this.props.view.id,\n        status: 'operation:stopped'\n      }));\n    }\n  }\n\n  _onNewWindow(e) {\n    console.log('new window opened by webview', e);\n    if (e.url.indexOf('localhost') > 0) {\n      this.props.dispatch(actions.addView(e.url));\n    } else {\n      window.require('electron').shell.openExternal(e.url);\n    }\n  }\n\n  render() {\n    const view = this.props.view;\n    return (\n      <ElectronWebView\n        className={this._isHidden(view)}\n        didFinishLoad={this._didFinishLoad}\n        didStartLoading={this._didStartLoading}\n        didStopLoading={this._didStopLoading}\n        newWindow={this._onNewWindow}\n        ipcMessage={this._onIpcMessage}\n        nodeintegration={true}\n        key={view.id} src={view.url}/>\n    );\n  }\n}\n\nfunction select(state) {\n  return state;\n}\n\nexport default connect(select)(WebView);\n"],"sourceRoot":"/source/"}